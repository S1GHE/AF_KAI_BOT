import KeyBoard
from Lib import Data_work
from LocalDataLessons import Lessons
from main import bot, dp
from Config import config
from Data import DataBase
from KeyBoard import status_menu, confirmation_menu
from Loader import register, lessons, report
from aiogram import types
from aiogram.dispatcher.filters import Command
from aiogram.dispatcher import FSMContext


async def get_default_commands(dp):
    await bot.set_my_commands(
        [
            types.BotCommand("start", "–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã"),
            types.BotCommand("reg", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"),
            types.BotCommand("les", "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"),
            types.BotCommand("report", "–°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ"),
            types.BotCommand("week", "–ß–µ—Ç–Ω–æ—Å—Ç—å/–ù–µ—á–µ—Ç–Ω–æ—Å—Ç—å –Ω–µ–¥–µ–ª–∏")
        ]
    )
    await bot.send_message(chat_id=config.admin_id, text="–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")


# Todo ---------------------------------------- Start -----------------------------------------------------------------
@dp.message_handler(Command("start"))
async def start(message: types.Message):
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name} üòâ\n\n"
                         f"<b>–¢–µ–ª–µ–≥—Ä–∞–º–º–∞ –æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤</b>\n"
                         f"–ë–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–∞–¥–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, –∏ –º—ã –±—ã–ª–∏ –±—ã —Ä–∞–¥—ã,"
                         f" –µ—Å–ª–∏ –∏–º–µ–Ω–Ω–æ —Ç—ã –ø–æ–º–æ–≥ –Ω–∞–º –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏! "
                         f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±—É–¥–µ—Ç –∑–∞–∫–æ–Ω—á–µ–Ω–æ —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é\n\n"
                         f"<b>–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º, —Ç–µ–±–µ —Å–ª–µ–¥—É–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è</b>: /reg",
                         parse_mode=types.ParseMode.HTML, reply_markup=types.ReplyKeyboardRemove())


# Todo -------------------------------------- Register Branch ---------------------------------------------------------
@dp.message_handler(Command("reg"))
async def register_step_start(message: types.Message):
    if DataBase.get_availability_user(message.from_user.id) == 1:
        await message.answer("<b>–í—ã –Ω–∞—á–∞–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é</b>\n\n"
                             "–î–ª—è –Ω–∞—á–∞–ª–∞, –Ω–∞–º –Ω–∞–¥–æ —É–∑–Ω–∞—Ç—å –∫—Ç–æ –≤—ã",
                             parse_mode=types.ParseMode.HTML, reply_markup=status_menu)
        await register.user_status.set()
    else:
        await message.answer("–£–ø—Å... üòï\n"
                             "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")


@dp.message_handler(state=register.user_status)
async def register_step_status(message: types.Message, state: FSMContext):
    if message.text == "–Ø —Å—Ç—É–¥–µ–Ω—Ç üë®‚Äçüéì":
        await state.update_data(user_id=message.from_user.id, user_status="–°—Ç—É–¥–µ–Ω—Ç")
    elif message.text == "–Ø –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å üë®‚Äçüè´":
        await state.update_data(user_id=message.from_user.id, user_status="–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å")
    else:
        await message.answer("–ü–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞")
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è", reply_markup=types.ReplyKeyboardRemove())
    await register.user_name.set()


@dp.message_handler(state=register.user_name)
async def register_step_name(message: types.Message, state: FSMContext):
    await state.update_data(user_name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é")
    await register.user_last_name.set()


@dp.message_handler(state=register.user_last_name)
async def register_step_last_name(message: types.Message, state: FSMContext):
    await state.update_data(user_last_name=message.text)
    user_info = await state.get_data()
    if user_info["user_status"] == "–°—Ç—É–¥–µ–Ω—Ç":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–≤–æ–µ–π –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–æ–π –≥—Ä—É–ø–ø—ã")
        await register.user_numbers_groups.set()
    else:
        await state.update_data(user_numbers_groups="None")
        await message.answer(f"–í–∞—à–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å: {user_info['user_status']}\n"
                             f"–í–∞—à–µ –∏–º—è: {user_info['user_name']}\n"
                             f"–í–∞—à–∞ —Ñ–∞–º–∏–ª–∏—è: {user_info['user_last_name']}\n\n"
                             f"–í—Å–µ –≤–µ—Ä–Ω–æ? ü§î", reply_markup=confirmation_menu)
        await register.user_answer.set()


@dp.message_handler(state=register.user_numbers_groups)
async def register_step_numbers_groups(message: types.Message, state: FSMContext):
    if not DataBase.get_check_group(message.text):
        await message.answer("–¢–∞–∫–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É")
        return
    else:
        await state.update_data(user_numbers_groups=message.text)
        user_info = await state.get_data()
        await message.answer(f"–í–∞—à–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å: {user_info['user_status']}\n"
                             f"–í–∞—à–µ –∏–º—è: {user_info['user_name']}\n"
                             f"–í–∞—à–∞ —Ñ–∞–º–∏–ª–∏—è: {user_info['user_last_name']}\n"
                             f"–í–∞—à–∞ –≥—Ä—É–ø–ø–∞: {user_info['user_numbers_groups']}\n\n"
                             f"–í—Å–µ –≤–µ—Ä–Ω–æ? ü§î", reply_markup=confirmation_menu)
        await register.user_answer.set()


@dp.message_handler(state=register.user_answer)
async def register_step_answer(message: types.Message, state: FSMContext):
    if message.text == "–î–∞ ‚úÖ":
        await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ ‚úÖ", reply_markup=types.ReplyKeyboardRemove())
        user_info = await state.get_data()
        if user_info['user_status'] == "–°—Ç—É–¥–µ–Ω—Ç":
            print(user_info)
            DataBase.set_user_data_json(user_id=user_info['user_id'], user_status=user_info['user_status'],
                                        user_name=user_info['user_name'], user_last_name=user_info['user_last_name'],
                                        user_group=user_info['user_numbers_groups'])
            await state.finish()
        elif user_info['user_status'] == "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å":
            await message.answer("–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–∞–º –Ω—É–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ—á—Ç—É")
            await state.finish()
    elif message.text == "–ù–µ—Ç ‚ùå":
        await message.answer("–í—ã –Ω–∞—á–∏–Ω–∞–µ—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ")
        await message.answer("–í–∞—à–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å?", reply_markup=status_menu)
        await register.user_status.set()


# Todo ------------------------------------------- Lessons Branch -----------------------------------------------------
@dp.message_handler(Command('les'))
async def les_step_start(message: types.Message):
    await message.answer('–í—ã–±–∏—Ä–∞–π—Ç–µ', reply_markup=KeyBoard.les_menu)
    await lessons.user_answer_les_start.set()


@dp.message_handler(state=lessons.user_answer_les_start)
async def les_menu(message: types.Message, state: FSMContext):
    if DataBase.get_availability_user(message.from_user.id) == 0:
        if message.text == "–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
            await message.answer("–í—ã–±–∏—Ä–∞–π—Ç–µ", reply_markup=KeyBoard.your_less_menu)
            await lessons.user_answer_your_les.set()
        elif message.text == "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è":
            await message.answer("–ù–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–∞–¥–∏–∏ –¥–æ—Ä–∞–±–æ—Ç–∫–∏\n\n "
                                 "P.s –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ü–µ –∞–ø—Ä–µ–ª—è")
            return
        elif message.text == "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –Ω–æ–º–µ—Ä—É –≥—Ä—É–ø–ø—ã":
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–æ–π –≥—Ä—É–ø–ø—ã")
            await lessons.user_answer_number_les.set()
        elif message.text == "–í—ã–π—Ç–∏":
            await message.answer("–í—ã—Ö–æ–¥", reply_markup=types.ReplyKeyboardRemove())
            await state.finish()
    else:
        await message.answer("–£–ø—Å... üòï\n"
                             "–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º, –≤–∞–º –Ω–∞–¥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è\n"
                             "–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: /reg")
        await state.finish()


@dp.message_handler(state=lessons.user_answer_your_les)
async def your_les_menu(message: types.Message, state: FSMContext):
    if DataBase.get_check_user_status(message.from_user.id) == "–°—Ç—É–¥–µ–Ω—Ç":
        if message.text == "–í—á–µ—Ä–∞":
            list_les = Lessons.get_schedule_students(DataBase.get_check_numbers_user(message.from_user.id),
                                                     Data_work.get_back_data())
            if len(list_les) == 0:
                await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: –í—á–µ—Ä–∞\n"
                                     f"–°–µ–π—á–∞—Å {Data_work.get_now_time()} {Data_work.get_now_data()}\n\n"
                                     f"–í—ã—Ö–æ–¥–Ω–æ–π üéâ", parse_mode=types.ParseMode.HTML)
            else:
                result = []
                for i in range(len(list_les)):
                    result.append(" ".join(list_les[i]))
                    result[i] = str(result[i]) + '\n\n'
                await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: –í—á–µ—Ä–∞\n"
                                     f"–°–µ–π—á–∞—Å {Data_work.get_now_time()} {Data_work.get_now_data()}\n\n"
                                     f"{''.join(result)}", parse_mode=types.ParseMode.HTML)
            return
        elif message.text == "–°–µ–≥–æ–¥–Ω—è":
            list_les = Lessons.get_schedule_students(DataBase.get_check_numbers_user(message.from_user.id),
                                                     Data_work.get_now_data())
            if len(list_les) == 0:
                await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: –°–µ–≥–æ–¥–Ω—è\n"
                                     f"–°–µ–π—á–∞—Å {Data_work.get_now_time()} {Data_work.get_now_data()}\n\n"
                                     f"–í—ã—Ö–æ–¥–Ω–æ–π üéâ", parse_mode=types.ParseMode.HTML)
            else:
                result = []
                for i in range(len(list_les)):
                    result.append(" ".join(list_les[i]))
                    result[i] = str(result[i]) + '\n\n'
                await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: –°–µ–≥–æ–¥–Ω—è\n"
                                     f"–°–µ–π—á–∞—Å {Data_work.get_now_time()} {Data_work.get_now_data()}\n\n"
                                     f"{''.join(result)}", parse_mode=types.ParseMode.HTML)
            return
        elif message.text == "–ó–∞–≤—Ç—Ä–∞":
            list_les = Lessons.get_schedule_students(DataBase.get_check_numbers_user(message.from_user.id),
                                                     Data_work.get_next_data())
            if len(list_les) == 0:
                await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: –ó–∞–≤—Ç—Ä–∞\n"
                                     f"–°–µ–π—á–∞—Å {Data_work.get_now_time()}\n\n"
                                     f"–í—ã—Ö–æ–¥–Ω–æ–π üéâ", parse_mode=types.ParseMode.HTML)
            else:
                result = []
                for i in range(len(list_les)):
                    result.append(" ".join(list_les[i]))
                    result[i] = str(result[i]) + '\n\n'
                await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: –ó–∞–≤—Ç—Ä–∞\n"
                                     f"–°–µ–π—á–∞—Å {Data_work.get_now_time()} {Data_work.get_now_data()}\n\n"
                                     f"{''.join(result)}", parse_mode=types.ParseMode.HTML)
            return
        elif message.text == "–ù–∞–∑–∞–¥":
            await message.answer("–ù–∞–∑–∞–¥", reply_markup=KeyBoard.les_menu)
            await lessons.user_answer_les_start.set()
    else:
        await message.answer("–ù–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–∞–¥–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")
        await state.finish()


@dp.message_handler(state=lessons.user_answer_number_les)
async def number_les(message: types.Message, state: FSMContext):
    if DataBase.get_check_group(message.text):
        await state.update_data(number_group=message.text)
        await message.answer("–í—ã–±–∏—Ä–∞–π—Ç–µ", reply_markup=KeyBoard.your_less_menu)
        await lessons.user_answer_number_les2.set()
    else:
        await message.answer("–£–ø—Å... üòï\n"
                             "–¢–∞–∫–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ—Ç –≤ –∫–∞–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")


@dp.message_handler(state=lessons.user_answer_number_les2)
async def number_les2(message: types.Message, state: FSMContext):
    number_groups = await state.get_data()
    if message.text == "–í—á–µ—Ä–∞":
        list_les = Lessons.get_schedule_students(number_groups['number_group'],
                                                 Data_work.get_back_data())
        if len(list_les) == 0:
            await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: –ì—Ä—É–ø–ø—É {number_groups['number_group']} –í—á–µ—Ä–∞\n"
                                 f"–°–µ–π—á–∞—Å {Data_work.get_now_time()} {Data_work.get_now_data()}\n\n"
                                 f"–í—ã—Ö–æ–¥–Ω–æ–π üéâ", parse_mode=types.ParseMode.HTML)
        else:
            result = []
            for i in range(len(list_les)):
                result.append(" ".join(list_les[i]))
                result[i] = str(result[i]) + '\n\n'
            await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: –ì—Ä—É–ø–ø—É {number_groups['number_group']} –í—á–µ—Ä–∞\n"
                                 f"–°–µ–π—á–∞—Å {Data_work.get_now_time()} {Data_work.get_now_data()}\n\n"
                                 f"{''.join(result)}", parse_mode=types.ParseMode.HTML)
        return
    elif message.text == "–°–µ–≥–æ–¥–Ω—è":
        list_les = Lessons.get_schedule_students(number_groups['number_group'],
                                                 Data_work.get_now_data())
        if len(list_les) == 0:
            await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: –ì—Ä—É–ø–ø—É {number_groups['number_group']} –°–µ–≥–æ–¥–Ω—è\n"
                                 f"–°–µ–π—á–∞—Å {Data_work.get_now_time()} {Data_work.get_now_data()}\n\n"
                                 f"–í—ã—Ö–æ–¥–Ω–æ–π üéâ", parse_mode=types.ParseMode.HTML)
        else:
            result = []
            for i in range(len(list_les)):
                result.append(" ".join(list_les[i]))
                result[i] = str(result[i]) + '\n\n'
            await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: –ì—Ä—É–ø–ø—É {number_groups['number_group']} –°–µ–≥–æ–¥–Ω—è\n"
                                 f"–°–µ–π—á–∞—Å {Data_work.get_now_time()} {Data_work.get_now_data()}\n\n"
                                 f"{''.join(result)}", parse_mode=types.ParseMode.HTML)
        return
    elif message.text == "–ó–∞–≤—Ç—Ä–∞":
        list_les = Lessons.get_schedule_students(number_groups['number_group'],
                                                 Data_work.get_next_data())
        if len(list_les) == 0:
            await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: –ì—Ä—É–ø–ø—É {number_groups['number_group']} –ó–∞–≤—Ç—Ä–∞\n"
                                 f"–°–µ–π—á–∞—Å {Data_work.get_now_time()}\n\n"
                                 f"–í—ã—Ö–æ–¥–Ω–æ–π üéâ", parse_mode=types.ParseMode.HTML)
        else:
            result = []
            for i in range(len(list_les)):
                result.append(" ".join(list_les[i]))
                result[i] = str(result[i]) + '\n\n'
            await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: –ì—Ä—É–ø–ø—É {number_groups['number_group']} –ó–∞–≤—Ç—Ä–∞\n"
                                 f"–°–µ–π—á–∞—Å {Data_work.get_now_time()} {Data_work.get_now_data()}\n\n"
                                 f"{''.join(result)}", parse_mode=types.ParseMode.HTML)
        return
    elif message.text == "–ù–∞–∑–∞–¥":
        await message.answer("–ù–∞–∑–∞–¥", reply_markup=KeyBoard.les_menu)
        await lessons.user_answer_les_start.set()


# Todo --------------------------------- Report Branch ---------------------------------------------------------------
@dp.message_handler(Command("report"))
async def report_start(message: types.Message):
    await message.answer('–ü–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É\n\n'
                         'P.S –ó–∞—Ä–∞–Ω–µ–µ –±–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –ø–æ–º–æ—â—å ü§©')
    await report.user_report.set()


@dp.message_handler(state=report.user_report)
async def report_message(message: types.Message, state: FSMContext):
    await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    DataBase.set_user_report(message.from_user.id, message.text,
                             f"{Data_work.get_now_data()} {Data_work.get_now_time()}")
    await state.finish()

# Todo ------------------------------------ Week Branch --------------------------------------------------------------
@dp.message_handler(Command("week"))
async def week_command(message : types.Message):
    if Data_work.get_parity_week(Data_work.get_now_data()) == "–ß–µ—Ç–Ω–∞—è":
        await message.answer()